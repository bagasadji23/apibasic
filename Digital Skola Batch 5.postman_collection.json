{
	"info": {
		"_postman_id": "9fee3af4-db08-464b-918f-25c1b0358730",
		"name": "Digital Skola Batch 5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30459291",
		"_collection_link": "https://digital-skola.postman.co/workspace/Digital-skola-Workspace~bf83156c-2ac8-4e66-9461-c7ff4e0e3cc5/collection/30459291-9fee3af4-db08-464b-918f-25c1b0358730?action=share&source=collection_link&creator=30459291"
	},
	"item": [
		{
			"name": "Get Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response data 'id' correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.be.eql(2)\r",
							"});\r",
							"\r",
							"pm.test(\"Validate first name field is Janet\", function () {\r",
							"     var responseData = pm.response.json();\r",
							"     pm.expect(responseData.data.first_name).to.equal('Janet');\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"data\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"email\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"first_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"last_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"avatar\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"email\",\r",
							"        \"first_name\",\r",
							"        \"last_name\",\r",
							"        \"avatar\"\r",
							"      ]\r",
							"    },\r",
							"    \"support\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"url\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"text\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"url\",\r",
							"        \"text\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"data\",\r",
							"    \"support\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate JSON scheme\", function () {\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{REQRES_URL}}/api/users/2",
					"host": [
						"{{REQRES_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Name field is morpheus\", function () {\r",
							"     var responseData = pm.response.json();\r",
							"     pm.expect(responseData.name).to.eql('morpheus');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate job is leader\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.job).to.equal('leader');\r",
							"});\r",
							"\r",
							"const schema = \r",
							"    {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate JSON scheme\", function () {\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{REQRES_URL}}/api/users/2",
					"host": [
						"{{REQRES_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{REQRES_URL}}/api/users/2",
					"host": [
						"{{REQRES_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Name field is morpheus\", function () {\r",
							"     var responseData = pm.response.json();\r",
							"     pm.expect(responseData.name).to.eql('morpheus');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate job is zion resident\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.job).to.equal('zion resident');\r",
							"});\r",
							"\r",
							"const schema = \r",
							"    {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"job\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"name\",\r",
							"    \"job\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate JSON scheme\", function () {\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{REQRES_URL}}/api/users/2",
					"host": [
						"{{REQRES_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}